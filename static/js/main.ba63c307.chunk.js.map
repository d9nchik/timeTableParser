{"version":3,"sources":["TimeTable/PCTimeTable.tsx","TimeTable/TimeTable.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["MyTable","data","activeDay","activePair","pairWeekNumber","pairActiveDay","pairActiveNumber","weekNumber","activeWeek","head","body","Table","striped","bordered","hover","className","map","item","index","row","rowIndex","String","TimeTable","date","Date","d","UTC","getFullYear","getMonth","getDate","setUTCDate","getUTCDate","getUTCDay","yearStart","getUTCFullYear","Math","ceil","Number","getWeekNumber","dayNumber","getDay","pair","pairNumber","length","error","selectPair","endOfPair","time","getHours","getMinutes","i","getNumberOfPair","console","log","PCTimeTable","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"gPAuDeA,EA3C4B,SAAC,GAMrC,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,UAII,gBAHJC,WAGI,GAHSC,EAGT,KAHyBC,EAGzB,KAHwCC,EAGxC,KAFJC,EAEI,EAFJA,WACAC,EACI,EADJA,WACI,cACoBP,GAAjBQ,EADH,KACYC,EADZ,WAEJ,OACE,eAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACE,uBAAOC,UAAU,aAAjB,SACE,6BACGN,EAAKO,KAAI,SAACC,EAAMC,GAAP,OACR,6BAA2BD,EAAK,IAAvBA,EAAK,GAAKC,UAIzB,gCACGR,EAAKM,KAAI,SAACG,EAAKC,GAAN,OACR,6BACGD,EAAIH,KAAI,SAACf,EAAMiB,GAAP,OACP,oBACEH,UACEX,IAAmBG,GACnBW,EAAQ,IAAMb,GACdC,IAAqBc,EACjB,gBACAb,IAAeC,GAAcN,IAAcgB,EAAQ,EACnD,aACA,GARR,SAYGG,OAAOpB,IAFHoB,OAAOpB,GAAQiB,OAZjBG,OAAOF,aCoDXG,MA/EsB,WACnC,IAAMC,EAAO,IAAIC,KACXjB,GA8BR,SAAuBkB,IAErBA,EAAI,IAAID,KAAKA,KAAKE,IAAID,EAAEE,cAAeF,EAAEG,WAAYH,EAAEI,aAGrDC,WAAWL,EAAEM,aAAe,GAAKN,EAAEO,aAAe,IAEpD,IAAMC,EAAY,IAAIT,KAAKA,KAAKE,IAAID,EAAES,iBAAkB,EAAG,IAG3D,OAAOC,KAAKC,OAAOC,OAAOZ,GAAKY,OAAOJ,IAAc,MAAW,GAAK,GAxC/CK,CAAcf,GAAQ,GAAK,EAC1CgB,GAAchB,EAAKiB,SAAW,GAAK,EACnCC,EAkDR,SACElC,EACAgC,EACAG,EACAzC,GAEA,OAAa,CACX,IAEE,GADWA,EAAKM,GAAYmC,EAAa,GAAGH,EAAY,GAC/CI,OACP,MAAO,CAACpC,EAAYgC,EAAWG,GAEjC,MAAOE,MAETF,EACiB,IACfA,EAAa,IACbH,EACgB,IACdA,EAAY,EACZhC,GAAeA,EAAa,GAAK,KAtE1BsC,CAAWtC,EAAYgC,EAyCtC,SAAyBhB,GAGvB,IAFA,IAAMuB,EAAY,CAAC,IAAM,KAAM,KAAM,KAAM,KAAM,MAC7CC,EAAyB,IAAlBxB,EAAKyB,WAAmBzB,EAAK0B,aAC/BC,EAAI,EAAGA,EAAIJ,EAAUH,OAAQO,IACpC,GAAIH,EAAOD,EAAUI,GAAI,OAAOA,EAElC,OAAOJ,EAAUH,OA/C8BQ,CAAgB5B,GAAOtB,GAItE,OAFAmD,QAAQC,IAAIZ,GAGV,gCACE,oBAAI1B,UAAU,cAAd,6FAEA,cAACuC,EAAD,CACErD,KAAMA,EAAK,GACXC,UAAWqC,EACXpC,WAAYsC,EACZjC,WAAYD,EACZA,WAAY,IAEd,oBAAIQ,UAAU,cAAd,6FAEA,cAACuC,EAAD,CACErD,KAAMA,EAAK,GACXC,UAAWqC,EACXpC,WAAYsC,EACZjC,WAAYD,EACZA,WAAY,QCjBLgD,MATf,WACE,OACE,gCACE,oBAAIxC,UAAU,cAAd,6FACA,cAAC,EAAD,QCIAyC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BvB,QAAQC,IACN,+GAKEW,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBjB,QAAQC,IAAI,sCAGRW,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAClC,GACNQ,QAAQR,MAAM,4CAA6CA,MCjGjE,IAYemC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFYnB,SAAkB3B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI2B,IAAIC,GAAwBnC,OAAOC,SAASmC,MACpDC,SAAWrC,OAAOC,SAASoC,OAIvC,OAGFrC,OAAOsC,iBAAiB,QAAQ,WAC9B,IAAMjC,EAAK,UAAM8B,GAAN,sBAEPrC,IAgEV,SAAiCO,EAAeC,GAE9CiC,MAAMlC,EAAO,CACXmC,QAAS,CAAE,iBAAkB,YAE5B9B,MAAK,SAAC+B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtC,UAAUC,cAAcsC,MAAMpC,MAAK,SAACC,GAClCA,EAAaoC,aAAarC,MAAK,WAC7BV,OAAOC,SAAS+C,eAKpB5C,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL1B,QAAQC,IAAI,oEAtFVsD,CAAwB5C,EAAOC,GAI/BC,UAAUC,cAAcsC,MAAMpC,MAAK,WACjChB,QAAQC,IACN,+GAMJS,EAAgBC,EAAOC,OElC/B4C,GAKA7B,K","file":"static/js/main.ba63c307.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport { Table } from 'react-bootstrap';\n\ninterface IProps {\n  data: string[][][];\n  activeDay: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n  activePair: [0 | 1, number, number];\n  activeWeek: number;\n  weekNumber: 0 | 1;\n}\n\nconst MyTable: FunctionComponent<IProps> = ({\n  data,\n  activeDay,\n  activePair: [pairWeekNumber, pairActiveDay, pairActiveNumber],\n  weekNumber,\n  activeWeek,\n}) => {\n  const [head, ...body] = data;\n  return (\n    <Table striped bordered hover>\n      <thead className=\"thead-dark\">\n        <tr>\n          {head.map((item, index) => (\n            <th key={item[0] + index}>{item[0]}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {body.map((row, rowIndex) => (\n          <tr key={String(row)}>\n            {row.map((data, index) => (\n              <td\n                className={\n                  pairWeekNumber === weekNumber &&\n                  index - 1 === pairActiveDay &&\n                  pairActiveNumber === rowIndex\n                    ? 'table-warning'\n                    : weekNumber === activeWeek && activeDay === index - 1\n                    ? 'table-info'\n                    : ''\n                }\n                key={String(data) + index}\n              >\n                {String(data)}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  );\n};\n\nexport default MyTable;\n","import React, { FunctionComponent } from 'react';\nimport data from '../data.json';\nimport PCTimeTable from './PCTimeTable';\n\nconst TimeTable: FunctionComponent = () => {\n  const date = new Date();\n  const weekNumber = ((getWeekNumber(date) + 1) % 2) as 0 | 1;\n  const dayNumber = ((date.getDay() + 6) % 7) as 0 | 1 | 2 | 3 | 4 | 5 | 6;\n  const pair = selectPair(weekNumber, dayNumber, getNumberOfPair(date), data);\n\n  console.log(pair);\n\n  return (\n    <div>\n      <h2 className=\"text-center\">Перший тиждень</h2>\n\n      <PCTimeTable\n        data={data[0]}\n        activeDay={dayNumber}\n        activePair={pair}\n        activeWeek={weekNumber}\n        weekNumber={0}\n      />\n      <h2 className=\"text-center\">Другий тиждень</h2>\n\n      <PCTimeTable\n        data={data[1]}\n        activeDay={dayNumber}\n        activePair={pair}\n        activeWeek={weekNumber}\n        weekNumber={1}\n      />\n    </div>\n  );\n};\n\nfunction getWeekNumber(d: Date) {\n  // Copy date so don't modify original\n  d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate()));\n  // Set to nearest Thursday: current date + 4 - current day number\n  // Make Sunday's day number 7\n  d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));\n  // Get first day of year\n  const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n  // Calculate full weeks to nearest Thursday\n  // Return array of year and week number\n  return Math.ceil(((Number(d) - Number(yearStart)) / 86400000 + 1) / 7);\n}\n\nfunction getNumberOfPair(date: Date): 0 | 1 | 2 | 3 | 4 | 5 | 6 {\n  const endOfPair = [1000, 1200, 1355, 1550, 1745, 2005];\n  let time = date.getHours() * 100 + date.getMinutes();\n  for (let i = 0; i < endOfPair.length; i++) {\n    if (time < endOfPair[i]) return i as 0 | 1 | 2 | 3 | 4 | 5;\n  }\n  return endOfPair.length as 6;\n}\n\nfunction selectPair(\n  weekNumber: 0 | 1,\n  dayNumber: 0 | 1 | 2 | 3 | 4 | 5 | 6,\n  pairNumber: 0 | 1 | 2 | 3 | 4 | 5 | 6,\n  data: string[][][][]\n): [0 | 1, number, number] {\n  while (true) {\n    try {\n      let pair = data[weekNumber][pairNumber + 1][dayNumber + 1];\n      if (pair.length) {\n        return [weekNumber, dayNumber, pairNumber];\n      }\n    } catch (error) {}\n\n    pairNumber++;\n    if (pairNumber > 5) {\n      pairNumber = 0;\n      dayNumber++;\n      if (dayNumber > 5) {\n        dayNumber = 0;\n        weekNumber = ((weekNumber + 1) % 2) as 0 | 1;\n      }\n    }\n  }\n}\nexport default TimeTable;\n","import React from 'react';\nimport './App.css';\nimport TimeTable from './TimeTable/TimeTable';\n\nfunction App() {\n  return (\n    <div>\n      <h1 className=\"text-center\">Розклад занять</h1>\n      <TimeTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}